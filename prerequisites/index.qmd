---
title: "Day 2 Prerequisites"
subtitle: "Preparation for the Claude Code Hackathon"
---

::: {.callout-important}
## Complete Before the Conference
Please complete all steps below **before Day 2** of the conference to ensure you can fully participate in the hackathon. 
:::

## Overview

Day 2 features a hands-on hackathon using Claude Code. The following are setup steps to ensure you can effectively use Claude Code and participate in the hackathon. The steps are listed for MacOS and Windows users, so please follow the instructions for your operating system. The steps for Windows were not tested, so please reach out if you encounter any issues.

## Required Setup Steps

### 1. Get Claude Code Max Plan

Claude Code requires a subscription to the Max plan for full functionality.

- Visit [Claude.ai](https://claude.ai)
- Sign up or log in to your account
- **Important:** You must create an individual account (not a collaborative/team account)
- Subscribe to the Claude Max plan ($100/month) 
- Send your invoice to Lars

::: {.callout-tip}
You can cancel the subscription after the conference if you don't wish to continue using it. You will have access to it for 1 month.
:::

### 2. Verify Terminal Access

You'll need to use the terminal/command line during the hackathon.

::: {.panel-tabset}
## macOS

1. Press `Cmd + Space` to open Spotlight
2. Type "Terminal" and press Enter
3. You should see a window with a command prompt
4. Type `echo "Terminal works!"` and press Enter
5. If you see "Terminal works!" printed, you're all set

## Windows

**Recommended: Windows Terminal**

1. Install Windows Terminal from the [Microsoft Store](https://aka.ms/terminal)
2. Once installed, press `Win` key and type "Windows Terminal"
3. Click to open Windows Terminal
4. In the terminal, type `echo Terminal works!` and press Enter
5. If you see "Terminal works!" printed, you're all set
:::

### 3. Install Node.js

Node.js is required for many modern web development tools and Claude Code extensions.

::: {.panel-tabset}
## macOS

1. Check if Node.js is already installed:
   ```bash
   node --version
   ```

2. If not installed, install using Homebrew:
   ```bash
   # Install Homebrew first if you don't have it
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
   
   # Then install Node.js
   brew install node
   ```

3. Verify installation:
   ```bash
   node --version
   npm --version
   ```

## Windows

1. Download Node.js from [nodejs.org](https://nodejs.org/)
2. Choose the LTS version (recommended)
3. Run the installer
4. **Important:** Keep all default settings, including "Add to PATH"
5. Open a new Command Prompt and verify:
   ```cmd
   node --version
   npm --version
   ```
:::

### 4. Install Claude Code

Claude Code is the AI coding assistant we'll use throughout the hackathon.

::: {.panel-tabset}
## macOS

1. Open Terminal
2. Install Claude Code using npm (Node.js must be installed first):
   ```bash
   npm install -g @anthropic-ai/claude-code
   ```
   **Important:** Do NOT use `sudo` with this command
3. After installation, verify by running:
   ```bash
   claude doctor
   ```
4. You should see a successful setup confirmation

## Windows

Claude Code on Windows requires Windows Subsystem for Linux (WSL). Due to the complexity of the Windows setup, please follow the comprehensive installation guide:

**[Complete Windows Installation Guide for Claude Code](https://github.com/VonHoltenCodes/CLAUDECODE_COMPLETE_WINDOWS_INSTALL_GUIDE/blob/main/docs/INSTALLATION.md)**

This guide includes:
- Detailed WSL setup instructions
- Node.js installation in WSL
- Claude Code installation and configuration
- Troubleshooting common Windows-specific issues
- Tips for optimal performance

::: {.callout-important}
## Windows Setup Requirements
- Windows 10 (version 2004+) or Windows 11
- Administrator access
- Approximately 30-45 minutes for complete setup
- After installation, you'll launch Claude Code using: `wsl claude` from your Documents folder
:::
:::

### 5. Install Python

Python is required for many data processing tasks.

::: {.panel-tabset}
## macOS

1. Check if Python is installed:
   ```bash
   python3 --version
   ```

2. If not installed, install using Homebrew:
   ```bash
   # Install Homebrew first if you don't have it
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
   
   # Then install Python
   brew install python
   ```

3. Verify installation:
   ```bash
   python3 --version
   pip3 --version
   ```

## Windows

1. Download Python from [python.org](https://www.python.org/downloads/)
2. Run the installer
3. **Important:** Check "Add Python to PATH" during installation
4. Open a new command prompt and verify:
   ```cmd
   python --version
   pip --version
   ```
:::

### 6. GitHub Account Setup

Ensure you can access your GitHub account:

1. Go to [github.com](https://github.com)
2. Log in to your account
3. Verify you can access your profile and repositories
4. **Recommended:** Set up [two-factor authentication](https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa)

### 7. Create Local Working Directory

Create a dedicated folder for storing code repositories locally (not in cloud-synced folders). The recommended location is in your Documents folder, named `gitrepos`. Use your preferred way of creating directories (Finder, File Explorer, or terminal/command line).

Below are the terminal commands for both macOS and Windows users.

::: {.panel-tabset}
## macOS

```bash
# Create the directory in Documents
mkdir -p ~/Documents/gitrepos

# Navigate to it
cd ~/Documents/gitrepos

# Verify it exists
pwd
```

You should see: `/Users/yourusername/Documents/gitrepos`

## Windows

```cmd
# Create the directory in Documents
mkdir %USERPROFILE%\Documents\gitrepos

# Navigate to it
cd %USERPROFILE%\Documents\gitrepos

# Verify it exists
cd
```

You should see: `C:\Users\yourusername\Documents\gitrepos`
:::

::: {.callout-warning}
## Important: Avoid Cloud-Synced Folders

Do **not** create your `gitrepos` folder inside:

- OneDrive
- Google Drive
- Dropbox
- iCloud Drive

These services can interfere with Git operations.
:::

### 8. Accept GitHub Organization Invitation

Before the conference, you'll receive an invitation to join the `openwashdata-conf` GitHub organization.

1. Check your email for the invitation
2. Click the invitation link
3. Accept the invitation to join the organization
4. Verify access at: [github.com/openwashdata-conf](https://github.com/openwashdata-conf)

::: {.callout-note}
If you haven't received an invitation by July 10, please contact the organizing team.
:::

## Verification Checklist

Before Day 2, ensure you can check all these boxes:

- [ ] Claude Code Max plan active
- [ ] Terminal/command line accessible
- [ ] Node.js installed and working
- [ ] Claude Code installed and working
- [ ] Python installed and working
- [ ] GitHub account accessible
- [ ] Local `gitrepos` folder created
- [ ] Member of `openwashdata-conf` organization

## Need Help?

If you encounter any issues during setup:

1. Check our [troubleshooting guide](#troubleshooting) below
2. Ask in the conference Element channel
3. Email Lars directly (you have his email address)

## Troubleshooting {#troubleshooting}

### Common Issues

**Claude Code won't install**

- Ensure Node.js is installed first (version 18+)
- Do NOT use `sudo` with npm install on macOS/Linux
- If permission errors occur, see [npm's guide on fixing permissions](https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally)
- Windows users: Follow the [Complete Windows Installation Guide](https://github.com/VonHoltenCodes/CLAUDECODE_COMPLETE_WINDOWS_INSTALL_GUIDE/blob/main/docs/INSTALLATION.md)
- The Windows guide includes troubleshooting for common WSL and permission issues

**Python command not found**

- Restart your terminal after installation
- Ensure Python was added to PATH during installation
- Try `python3` instead of `python` on macOS/Linux

**Can't create gitrepos folder**

- Ensure you have write permissions
- Try creating in your user home directory
- Avoid special characters in the path

**GitHub invitation not received**

- Check spam/junk folders
- Verify your email address with organizers
- Request a resend if needed

