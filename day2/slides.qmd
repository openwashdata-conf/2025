---
title: "Why Claude Code"
subtitle: "AI-Assisted Development for openwashdata"
format: revealjs
---

TODO: turn the YAML into a complete list of fields as in @day1 material

# Warm-up

## 1:1 check-in

TODO: Make this an Activity. Add timings. 10 minutes 1:1, 4 minutes per person. Then back to plenary. 1 point per group to plenary.

- How has it felt for you so far to use AI tools in your work?
- What are your expectations for today?
- What are you most excited about?
- What are you most nervous about?

## AI journey for me

- Perplexity web app has replaced my search engine
- Used GitHub Copilot for auto-completing suggestions for code and text in RStudio
- Copy/paste code to Perplexity to help with errors
- Found working with code and those tools not very satisfying

## And then...

> I built a synthetic data generator last year...Over the last week I rewrote it as a way of exploring some new tools:

> The command-line interface to [Claude](https://docs.anthropic.com/en/docs/claude-code/overview). I’m disgusted by the amorality of the AI industry, but am now convinced that the coding tools are here to stay: writing tests and refactoring code with Claude’s help was *much* faster than doing it by hand.

- Greg Wilson

TODO make the author appear as the author of the quotes.

::: footer

Greg Wilson's Blog, 2025-03-29, [Tooling for Snailz](https://third-bit.com/2025/03/29/tooling-for-snailz/) 

## 2025-05-30 - 10:56 am

- TODO screenshot: claude-discovery

## 2025-05-30 - 11:12 am

- TODO screenshot: claude-lose-mind

## 2025-05-30 - 14:55 am

- TODO screenshot: claude-ice-cream

## First commands 

The following Monday, I would start teaching the class for University of Colorado, Boulder. I hadn't prepared a single thing yet.

I forked the repository from two years ago for a new website and then...

TODO: Make this look like a statement by me.

## First commands

TODO: make this appear like bash terminal code block

```bash
> replace filename tbl-02-cven5837-ss23-learning-objectives.csv with tbl-02-learning-objectives.csv in all files

> remove all <script defer data-domain="cven5837-ss23.github.io/website" src="https://plausible.io/js/plausible.js"></script>

> Add variables to _variables.yml for homework due dates. Make it the Friday of the same week as found and replace the text in weeks material with dynamic variables.

> Update the link to slides.scss for all slides

```



## Use case - GitHub

Claude integrates with GitHub. Tell it to `> commit and push to GitHub` and it will guide you through the process of authorization. After that, you interact with GitHub using commands:

```bash
> commit & push
> create issue for X problem and prepare a list of todo's
```
## Use case - GHE GitHub

> Hey Lars, your GitHub Organization really needs to be tidied. There are a lot of empty repos. It doesn't look good to an outsider. - Fiona at the retreat

> Hi both!  I'm currently going through the GitHub repos and Jakub Tkaczuk reminded me that we wanted to clean them up a few months ago and then never did as we didn't switch to GitLab.


## Use case - GHE GitHub 

- TODO:add screenshot of Google Sheet

## Use case - GHE GitHub

```
> Work on GitHub organization Global-Health-Engineering. Delete the following repos:

[copy & paste list from Google Sheet]

```

...30s later

DONE

## ccusage 

TODO: add ccusage screenshot

That's why we pay 100 USD a month instead of using token credits.

::: footer
https://github.com/ryoppippi/ccusage
:::

## Slash commands

```bash

> /init

```

- prepares a `CLAUDE.md` in your folder

TODO: write the following as tips 

- you can add anything to that file that Claude should use as context
- you can update it over time
- find templates specifically for the type of work that you to
- use `# and write a line to add something to the file`

## PLAN -> CREATE -> TEST -> DEPLOY

- Claude excels when it can plan first
- Ask to check-in with you, run the plan by you, or use "plan mode"
- Tell Claude to "think" "think harder" "ultrathink"
- Once you are happy with the plan, tell Claude to work on it, either bit by bit, or everything at once

## Shift + Tab

- auto-completion
- plan mode

## Workflow - Get started

1. Think of a name for your project
    - naming convention: all small letters, use dashes between words (unless it's an R package), max three words
2. Create a new repository in: github.com/openwashdata-conf
3. Clone the repository to your `gitrepos` folder
4. Open your Terminal on the project folder or navigate to it in your Terminal
5. In parallel, open the project folder in your preferred IDE (e.g., RStudio, VSCode)

## Workflow - Start Claude

1. In the Terminal has its working directory on the project folder, type `claude` and press Enter
2. Claude will start in the Terminal, and you can interact with it
3. Every time, after Claude has created something, you use the command `> commit & push` to save your work
  - the first time you use this command, Claude will ask you to authorize access to your GitHub account

## Workflow - Provide context

1. Add files to your folder that are relevant for your project or could help Claude learn about your context:
   - `data.csv` downloaded from the web or exported from a Google Sheet on our Drive
   - `report.pdf` PDFs you want to work with 
   - `bibliograph.bib` file for your references
   - `*.docx, *.xlsx, *.pptx` etc. (Claude converts everything to `.md`) files that you want to use as context
   - any other files that are relevant for your project
2. Use your IDE to create a new file inside your folder and name it: `initial-prompt.md`
3. In `initial-prompt.md`, write a detailed prompt for Claude to start with. Include links to websites and tell Claude what you need from them. Add YouTube Video links (Claude can also transcribe them). 

## Workflow - Start creating

```bash
Use @initial-prompt.md and make a plan for this project. Run it by me. Think hard.
```

## Workflow - Accept permission

- Claude will ask you for permissions to do things
- Accept them with 

TODO: List the three options that Claude gives me when first encountering reading files or creating files.

```bash

```

## Workflow - CLAUDE.md

1. After working some time, crate the CLAUDE.md using the slash command `/init`
2. Review it. Add things. Adapt things.

## Workflow - Review & Refine

- Review Claude’s work in your IDE (use the diff tool to see changes)
- Edit files yourself as needed
- Run Claude again for improvements
- Run through a file, add `TODO: ` comments for Claude to address and then tell Claude to:

```bash
Work on the TODOs that I have outlined for your in @slides.qmd
```
It’s all in your hands now! TODO: highlight this sentence

## Workflow - README.md

If you:

- have had enough of that project (any time from minutes to hours) and you want to do something else
- think it's "finished" and you want to do something else
- don't even like it

```bash
> create a README.md of this project. do not focus on how to run, install, or deploy the software in here. Provide a high level summary of what I wanted to achieve and what I have done so far. Add the directory tree of the project folder.
```

## Tips

- Claude doesn't get tired. Hit `Esc` if you don't like what you see and want Claude to stop. Start over.
- Tell Claude to revert to a previous commit if you don't like the current state of your project. That's why `> commit & push` is so important after every round of changes Claude has made.

## Tips

TODO: Add some tools that Claude can use

- Claude will write code scripts (mostly in Python) but can install on tool on your behalf.

## Tips continued

```bash
> Use best practices for folder organization and clean up this project folder. 
```

Or

```bash
> Use the practices described in this paper LINK to re-organize the structure in this project folder.
```

## Tips continued

- Try and experiment as much as you can.
- Keep some notes of your experiences
- Watch Videos on YouTube about Claude Code

## Model Context Protcol (MCP clients/server)

This is levelling up by integrating other tools into Claude Code.

- Google Workspace
- Zotero 
- Perplexity Search
- OpenStreetMap
- Asana
- 100s are being developed every day

My personal favourites so far: https://github.com/stars/larnsce/lists/mcps
Awesome-List on GitHub: https://github.com/punkpeye/awesome-mcp-servers

TODO: add note

If at some point today, you would like to add Zotero as a tool to interact with, let me know.

## Recommended Videos

TODO: Add title of these videos and hyperlink and add author

- https://www.youtube.com/watch?v=6eBSHbLKuN0 
- history and concept: https://www.youtube.com/watch?v=Lue8K2jqfKk 
- https://www.youtube.com/watch?v=TiNpzxoBPz0&list=LL&index=2&t=4s add author
- https://www.youtube.com/watch?v=aHTXccrfXC8&t=1223s add author

